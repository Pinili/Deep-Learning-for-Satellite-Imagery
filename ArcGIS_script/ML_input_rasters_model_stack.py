"""
-----------------------------------------------------------------------------------------
Script:       ML_input_rasters_model_stack.py
Path:         D:\\GEOG490_Data\\scripts
Author:       Justin Baradi
Created:      2019-03-27 03:51:13.00000 (generated by ArcGIS/ModelBuilder)
Modified:     2019-03-31  (last change date)
Run Version:  ArcGIS 10.3.0.4322


Purpose:
Takes points and a multispectral raster and outputs clipped rasters of those points,
given a buffer size.

More information about this script: 
https://github.com/Pinili/Deep-Learning-for-Satellite-Imagery

Requires:
SplitLayerByAttribute.py in <sys.path>

Preconditions:
1) Location point file input here: <mask_file>
2) Raster input folder to clip here: <raster_location>
3) Raster should be a stacked GeoTIFF
4) Locations and files (input and output workspaces) must exist when script is executed
   (Local variables should have correct file/folder names and paths)
5) Support up to 9999 points (will need to change code manually for anything greater)
6) Field will need to be chosen in external script for incremental value, such as
   OBJECTID or FID for <field_sel>

Postconditions:
1) A scratch geodatabase workspace will be created  <mask_scratch>\\GEOG490_maskscratch
2) Clipped rasters will be created in <out_folder>\\<date_output>
3) NoData will be stored as NoData
-----------------------------------------------------------------------------------------
"""
# Import arcpy module
import arcpy, os, sys, time, subprocess
from os import listdir
from os.path import isfile, join
print("Running: ... ML_input_raster_model_stack.py")
print("")
# Local variables:
arcpy.env.overwriteOutput = True
buffer_size = "30 Meters"
mask_location = "D:\\GEOG490_Data\\Sentinel-2\\fake_data\\"
mask_file = "fake_points.shp"
mask_scratch = "D:"
raster_location = "D:\\GEOG490_Data\\Sentinel-2\\input\\2017-08-30\\"
raster_file = "T15TWK_20170830T170423.tif"
out_folder = "D:\\GEOG490_Data\\Sentinel-2\\output\\"
date_output = "2017-08-30_15TWK_fake"
sys.path = ["D:\\GEOG490_Data\\scripts"]
field_sel = "OBJECTID"
# Start time
overallStartTime = time.time()

# Create mask files from point shapefile
print("Creating mask files from point shapefile...")
maskStartTime = time.time()
# Create scratch folder
if os.path.exists(mask_scratch + "\\GEOG490_maskscratch"):
    print("*Deleting old GEOG490_maskscratch first...")
    arcpy.Delete_management(mask_scratch + "\\GEOG490_maskscratch")
arcpy.CreateFolder_management(mask_scratch, "GEOG490_maskscratch")
# Create scratch geodatabase
if os.path.exists(mask_scratch + "\\GEOG490_maskscratch.gdb"):
    print("*Deleting old GEOG490_maskscratch.gdb first...")
    arcpy.Delete_management(mask_scratch + "\\GEOG490_maskscratch.gdb")
arcpy.CreateFileGDB_management(mask_scratch, "GEOG490_maskscratch.gdb")

# Set raster as basis for coordinate system
sr = arcpy.CreateSpatialReference_management("", raster_location + raster_file)
# Process: Project
arcpy.Project_management(mask_location + mask_file, mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_proj", sr)
# Process: Buffer
arcpy.Buffer_analysis(mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_proj", mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_buffer", buffer_size, "FULL", "ROUND", "NONE", "", "PLANAR")
# Process: Feature Envelope To Polygon
arcpy.FeatureEnvelopeToPolygon_management(mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_buffer", mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_masktemp", "SINGLEPART")

# Select Layers by Location, then output layer to scratch
# Process: Raster Domain
arcpy.RasterDomain_3d(raster_location + raster_file, mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_rasterExtent", "POLYGON")
# Make temp layer with polygon mask and raster extent
arcpy.MakeFeatureLayer_management(mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_masktemp", 'temp_mask_within')
arcpy.MakeFeatureLayer_management(mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_rasterExtent", 'temp_rasterExtent')
# Get only polygons that are within the raster
arcpy.SelectLayerByLocation_management("temp_mask_within", "COMPLETELY_WITHIN", "temp_rasterExtent", "", "NEW_SELECTION", "NOT_INVERT")
# Output new file, only if there are no problems
matchcount = int(arcpy.GetCount_management('temp_mask_within')[0]) 
if matchcount == 0:
	print('Error: No points exist within the clipping raster!')
	sys.exit('Error: No points exist within the clipping raster!')
else:
	print(str(matchcount) + ' points found within the raster to clip.')
	arcpy.CopyFeatures_management('temp_mask_within',  mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_mask")

# Import and execute special module
# Create a separate polygon mask file for each feature in the polygon layer
print("Running external script...")
print("--")
cmdToRun="python SplitLayerByAttributes.py " + mask_scratch + "\\GEOG490_maskscratch.gdb\\" + mask_file[:-4] + "_mask " +field_sel + " maskfile_ " + mask_scratch + "\\GEOG490_maskscratch\\"
p = subprocess.Popen(cmdToRun, stdout=subprocess.PIPE, shell=True)
(output, err) = p.communicate()
p_status = p.wait()
print "Command output : ", output
print "Command exit status/return code : ", p_status
print("--")
if p_status == 1:
	print("Error 1 found. The external script did not run successfully. (Maybe the parameters are wrong?)")
	sys.exit("Error 1 found. The external script did not run successfully. (Maybe the parameters are wrong?)")

print("Finished creating mask files! Took " + str(time.time() - maskStartTime) + " seconds.")

# List raster to clip in Sentinel-2 input folder
print("Raster file: " + raster_file)
# Create raster output date folder
if os.path.exists(out_folder + date_output):
    print("*Deleting old " + date_output + " folder first...")
    arcpy.Delete_management(out_folder + date_output)
arcpy.CreateFolder_management(out_folder, date_output)
# Run through raster and each shapefile ...
print("Creating clip rasters for " + raster_file + "...")
rasterStartTime = time.time()
# Create a new folder for each band
# Loop and clip the input raster band with each polygon mask file defined earlier
out_folder_path = out_folder + date_output + "\\"
shpFiles = [f for f in listdir(mask_scratch + "\\GEOG490_maskscratch\\") if isfile(join(mask_scratch + "\\GEOG490_maskscratch\\", f)) and f[-4:].startswith('.shp')]
for shpFile in shpFiles:
	if (matchcount > 99): # change naming scheme if there is greater than 99 points, up to 9999
		arcpy.Clip_management(\
			raster_location + raster_file,\
			"",\
			out_folder_path + raster_file[:-4] + "_" + shpFile[-8:-4] + ".tif",\
			mask_scratch + "\\GEOG490_maskscratch\\" + shpFile,\
			"",\
			"ClippingGeometry",\
			"MAINTAIN_EXTENT") # can remove MAINTAIN_EXTENT parameter, if you want true raster location
	else:
		arcpy.Clip_management(\
			raster_location + raster_file,\
			"",\
			out_folder_path + raster_file[:-4] + "_" + shpFile[-6:-4] + ".tif",\
			mask_scratch + "\\GEOG490_maskscratch\\" + shpFile,\
			"",\
			"ClippingGeometry",\
			"MAINTAIN_EXTENT") # can remove MAINTAIN_EXTENT parameter, if you want true raster location
if (time.time() - rasterStartTime == 0):
	print("Error 2 found. The external script did not run successfully. (Maybe the parameters are wrong?)")
	sys.exit("Error 2 found. The external script did not run successfully. (Maybe the parameters are wrong?)")

print("Finished creating rasters for " + raster_file + "! Took " + str(time.time() - rasterStartTime) + " seconds.")
print("Finished script: creating ML input rasters! Took " + str(time.time() - overallStartTime) + " seconds.")
